import telebot
import random
import time
import datetime
from datetime import datetime
from telebot import types

correct_count = 0
count = 0

date = 0

res2 = 0
res1 = 0
res0 = 0 

sec1 = 0
min1 = 0
hour1 = 0
i = 0

TOKEN = '2127431193:AAFFUcL03tmD9wjvj1sRLkcm_03bwUPyh54'
bot = telebot.TeleBot(TOKEN)

@bot.message_handler(commands=['start'])
def welcome(message):
	sti = open('static/sticker.webp', 'rb')
	bot.send_sticker(message.chat.id, sti)
	
	# keyboard
	markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
	item1 = types.KeyboardButton("üëÄ –†–æ–∑–ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
 
	markup.add(item1)

	bot.send_message(message.chat.id, ' –í—ñ—Ç–∞—é, {0.first_name}ü¶æ\n–Ø - <b> –±–æ—Ç</b>, —è–∫–∏–π –ø—Ä–æ—Ç–µ—Å—Ç—É—î —Ç–µ–±–µ\n–ù–µ—Ö–∞–π —É–¥–∞—á–∞ –∑–∞–≤–∂–¥–∏ –±—É–¥–µ –∑ –≤–∞–º–∏!üêô'.format(message.from_user, bot.get_me()),
		 parse_mode='html', reply_markup=markup)

@bot.message_handler(content_types=['text'])
def test(message):
	global date
	global res0
	global res1
	global res2

	if message.chat.type == 'private':

		if message.text == 'üòä –î—ñ–∑–Ω–∞—Ç–∏—Å—è —á–∞—Å':
			bot.send_message(message.chat.id, f'–í–∏ –ø—Ä–æ–π—à–ª–∏ —Ç–µ—Å—Ç –∑–∞ {res0} –≥–æ–¥ {res1%60} —Ö–≤ {res2%60%60} —Å–µ–∫ | {date}\n')

		elif message.text == 'üëÄ –†–æ–∑–ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è' or message.text == 'üëÄ –ó–Ω–æ–≤—É —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è':
			markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
			item1 = types.KeyboardButton("‚ùå –ó–∞–∫—ñ–Ω—á–∏—Ç–∏ —Ç–µ—Å—Ç")
			markup.add(item1)
			bot.send_message(message.chat.id, '–¢–µ—Å—Ç —Ä–æ–∑–ø–æ—á–∞—Ç–æ...'.format(message.from_user),
				parse_mode='html', reply_markup=markup)

			global sec1
			global min1
			global hour1

			now=datetime.now()
			sec1=now.strftime("%S")
			min1=now.strftime("%M")
			hour1=now.strftime("%H")

			arr = []
			global correct_count
			global count
			global i
			correct_count = 0
			count = 0
			i = 0

			for j in range(10):
				arr.append(j+1)

			random.shuffle(arr)

			def set_question(question, variant1, variant1_callback, variant2, variant2_callback, variant3, variant3_callback, variant4, variant4_callback):
				markup = types.InlineKeyboardMarkup(row_width=4)
				answer1 = types.InlineKeyboardButton(variant1, callback_data=variant1_callback)
				answer2 = types.InlineKeyboardButton(variant2, callback_data=variant2_callback)
				answer3 = types.InlineKeyboardButton(variant3, callback_data=variant3_callback)
				answer4 = types.InlineKeyboardButton(variant4, callback_data=variant4_callback)
				markup.add(answer1, answer2, answer3, answer4)
				bot.send_message(message.chat.id, question, reply_markup=markup)

			def questionbase(i):
				if i == 1: set_question('–Ø–∫–∏–π –∑ –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ —î –≤—ñ—Ä–Ω–∏–º –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º private –ø–æ–ª—è?\n\n1Ô∏è‚É£   private field = 0\n2Ô∏è‚É£   field = 0\n3Ô∏è‚É£   _field = 0\n4Ô∏è‚É£   __field = 0','1Ô∏è‚É£','-','2Ô∏è‚É£','+','3Ô∏è‚É£','-','4Ô∏è‚É£','-')
				elif i == 2:
					img = open('static/question2.jpg', 'rb')
					bot.send_sticker(message.chat.id, img)
					set_question('–©–æ –≤–∏–≤–µ–¥–µ –∫–æ–¥?\n\n1Ô∏è‚É£   –°anineError: Dog malfunction\n2Ô∏è‚É£   Woof!\n3Ô∏è‚É£   Arff!\n4Ô∏è‚É£   *walkin*','1Ô∏è‚É£','-','2Ô∏è‚É£','-','3Ô∏è‚É£','+','4Ô∏è‚É£','-')
				elif i == 3: set_question('–Ø–∫ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—É –ê?\n\n1Ô∏è‚É£   A(–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞)\n2Ô∏è‚É£   def __init__(–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞)\n3Ô∏è‚É£   def __A__(–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞)\n4Ô∏è‚É£   def init(–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞)','1Ô∏è‚É£','-','2Ô∏è‚É£','+','3Ô∏è‚É£','-','4Ô∏è‚É£','-')
				elif i == 4: set_question('–ó–Ω–∞–π–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∑–∞–ø–∏—Å\n\n1Ô∏è‚É£   <–µ–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—É>.<—ñ–º‚Äô—è –º–µ—Ç–æ–¥—É> ([–ø–∞—Ä–∞–º–µ—Ç—Ä–∏])\n2Ô∏è‚É£   <—ñ–º‚Äô—è –º–µ—Ç–æ–¥—É>.<–µ–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—É> ([–ø–∞—Ä–∞–º–µ—Ç—Ä–∏])\n3Ô∏è‚É£   <—ñ–º‚Äô—è –º–µ—Ç–æ–¥—É>.<–ø–∞—Ä–∞–º–µ—Ç—Ä–∏> (–µ–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å[—É])\n4Ô∏è‚É£   <—ñ–º‚Äô—è –º–µ—Ç–æ–¥—É><–ø–∞—Ä–∞–º–µ—Ç—Ä–∏>.(–µ–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å[—É])','1Ô∏è‚É£','-','2Ô∏è‚É£','+','3Ô∏è‚É£','-','4Ô∏è‚É£','-')
				elif i == 5: set_question('–©–æ –æ–∑–Ω–∞—á–∞—î –ø–∞—Ä–∞–º–µ—Ç—Ä self —É –∑–∞–≥–æ–ª–æ–≤–∫—É –º–µ—Ç–æ–¥—É?\n\n1Ô∏è‚É£   –ù–∞–∑–≤—É –ø–æ–¥—ñ—ó\n2Ô∏è‚É£   –ó–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –æ–±‚Äô—î–∫—Ç–∞\n3Ô∏è‚É£   –ó–∞–º—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ self –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è —ñ–º‚Äô—è –æ–±‚Äô—î–∫—Ç–∞\n4Ô∏è‚É£   –ó–∞–º—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ self –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è —ñ–º‚Äô—è –ø–æ–¥—ñ—ó','1Ô∏è‚É£','-','2Ô∏è‚É£','-','3Ô∏è‚É£','+','4Ô∏è‚É£','-')
				elif i == 6: set_question('–ö–ª–∞—Å - —Ü–µ\n\n1Ô∏è‚É£   –¢–∏–ø –≤–µ–ª–∏—á–∏–Ω\n2Ô∏è‚É£   –û–ø–∏—Å –æ–±‚Äô—î–∫—Ç—ñ–≤ –ø–µ–≤–Ω–æ–≥–æ —Ç–∏–ø—É\n3Ô∏è‚É£   –û–ø–∏—Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ–±‚Äô—î–∫—Ç–∞\n4Ô∏è‚É£   –ú–µ—Ç–æ–¥ —Ä–æ–∑–≤‚Äô—è–∑—É–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ','1Ô∏è‚É£','-','2Ô∏è‚É£','+','3Ô∏è‚É£','-','4Ô∏è‚É£','-')
				elif i == 7: set_question('–ï–∫–∑–µ–º–ø–ª—è—Ä –¥–µ—è–∫–æ–≥–æ –∫–ª–∞—Å—É —Ü–µ\n\n1Ô∏è‚É£   –¢–∏–ø\n2Ô∏è‚É£   –ü—ñ–¥–∫–ª–∞—Å\n3Ô∏è‚É£   –í–∞—Ä—ñ–∞–Ω—Ç\n4Ô∏è‚É£   –û–±‚Äò—î–∫—Ç','1Ô∏è‚É£','-','2Ô∏è‚É£','-','3Ô∏è‚É£','-','4Ô∏è‚É£','+')
				elif i == 8: set_question('–Ø–∫ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∞—Ç—Ä–∏–±—É—Ç–∞ name –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ my_school?\n\n1Ô∏è‚É£   name(my_school)\n2Ô∏è‚É£   name.my_school\n3Ô∏è‚É£   name.my_school\n4Ô∏è‚É£   my_school_name','1Ô∏è‚É£','-','2Ô∏è‚É£','-','3Ô∏è‚É£','+','4Ô∏è‚É£','-')
				elif i == 9: 
					img = open('static/question9.jpg', 'rb')
					bot.send_sticker(message.chat.id, img)
					set_question('–£ —è–∫–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –µ–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—É B()?\n\n1Ô∏è‚É£   my_b = B("–ö–ª–∞—Å", 10)\n2Ô∏è‚É£   my_b = B("–¢–µ—Ç—è–Ω–∞", "–ú–∞—Ä–∏–Ω–∞", 10)\n3Ô∏è‚É£   my_b = B(–¢–µ—Ç—è–Ω–∞, –ú–∞—Ä–∏–Ω–∞, 10)\n4Ô∏è‚É£   my_b = B("–¢–µ—Ç—è–Ω–∞", "–ú–∞—Ä–∏–Ω–∞")','1Ô∏è‚É£','-','2Ô∏è‚É£','+','3Ô∏è‚É£','-','4Ô∏è‚É£','-')
				elif i == 10: set_question('–ù–∞ –æ—Å–Ω–æ–≤—ñ –∫–ª–∞—Å—É –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏\n\n1Ô∏è‚É£   C—Ç—ñ–ª—å–∫–∏ –µ–∫–∑–µ–º–ø–ª—è—Ä—ñ–≤, —Å–∫—ñ–ª—å–∫–∏ –≤–∞–º –±—É–¥–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ\n2Ô∏è‚É£   –î–≤–∞ –µ–∫–∑–µ–º–ø–ª—è—Ä–∏\n3Ô∏è‚É£   –¢—ñ–ª—å–∫–∏ –æ–¥–∏–Ω –µ–∫–∑–µ–º–ø–ª—è—Ä\n4Ô∏è‚É£   –ù–µ –º–æ–∂–Ω–∞ —ó—Ö —Å—Ç–≤–æ—Ä–∏—Ç–∏','1Ô∏è‚É£','+','2Ô∏è‚É£','-','3Ô∏è‚É£','-','4Ô∏è‚É£','-')

			def next_question():
				global i
				if i<9:
					i+=1
					questionbase(arr[i])

			questionbase(arr[i])

			@bot.callback_query_handler(func=lambda call: True)
			def callback(call):
				global correct_count
				try:
					if call.message:
						if call.data == '+':
							correct_count += 1
							alert(call, call.message)
						elif call.data == '-':
							alert(call, call.message)

				except Exception as e:
					print(repr(e))

			def alert(call, message):
				global count
				count += 1
				bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
					text="–í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ...")

				next_question()
				if count == 10:
					markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
					item2 = types.KeyboardButton("‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
					markup.add(item2)
					bot.send_message(message.chat.id, ' –í–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–∫—ñ–Ω—á–∏–ª–∏ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É‚ú®\n–ë–∞–∂–∞—î—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç?'.format(message.from_user),
						parse_mode='html', reply_markup=markup)

		elif message.text == '‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç' or message.text == '‚ùå –ó–∞–∫—ñ–Ω—á–∏—Ç–∏ —Ç–µ—Å—Ç':
			sti = open('static/sticker2.webp', 'rb')
			bot.send_sticker(message.chat.id, sti)

			date = datetime.now().date()
			now = datetime.now()
			sec2 = now.strftime("%S")
			min2 = now.strftime("%M")
			hour2 = now.strftime("%H")

			hourr1 = int(hour1)
			hourr2 = int(hour2)
			hour = hourr2-hourr1
			res0 = hour

			min1hour1 = int(hour1*60+min1)
			min2hour2 = int(hour2*60+min2)
			minres1 = min2hour2-min1hour1
			res1 = minres1%60

			sec1min1hour1 = int(hour1*60+min1*60+sec1)
			sec2min2hour2 = int(hour2*60+min2*60+sec2)
			res2 = sec2min2hour2 - sec1min1hour1

			markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
			item1 = types.KeyboardButton("üëÄ –ó–Ω–æ–≤—É —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
			item2 = types.KeyboardButton('üòä –î—ñ–∑–Ω–∞—Ç–∏—Å—è —á–∞—Å')
			markup.add(item1, item2)
			bot.send_message(message.chat.id, f'–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç -  <b>–≤—ñ—Ä–Ω–∏—Ö {correct_count} —ñ–∑ {count} –∑–∞–ø–∏—Ç–∞–Ω—å</b>'.format(message.from_user),
				parse_mode='html', reply_markup=markup)

		else:
			bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é, —â–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ üò¢')

# RUN
bot.polling(none_stop=True)